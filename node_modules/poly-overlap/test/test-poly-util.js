"use strict";

var assert  = require('assert');
var pu      = require('../index');

describe('poly-overlap', function () {

    it('line segments intersect', function () {
        var result = pu.intersect(0,0, 1,0, 0.5,0.5, 0.5,-0.5);
        assert(result===true);
    });

    it('line segments DONT intersect', function () {
        var result = pu.intersect(0,0, 1,0, 0.0,0.5, 1.0,0.5);
        assert(result===false);
    });

    it('line segments are the same -> should intersect', function () {
        var result = pu.intersect(0,0, 1,0, 0,0, 1,0);
        assert(result===true);
    });

    it('line segments collinear -> should NOT intersect', function () {
        var result = pu.intersect(0,0, 1,0, 1.5,0, 2.5,0);
        assert(result===false);
    });

    it('line segments share point -> should intersect', function () {
        var result = pu.intersect(0,0, 1,0, 1,0, 2,0);
        assert(result===true);
    });

    it('line segments ... should intersect', function () {
        var result = pu.intersect(0,0, 2,0, 0.5,-0.5, 0.5,1.5);
        assert(result===true);
    });


    it('get bounds of poly', function() {
        var poly = [[0,0], [2,0], [0,1]];
        var bounds = pu.bounds(poly);
        assert(bounds[0][0]===0);
        assert(bounds[0][1]===0);
        assert(bounds[1][0]===2);
        assert(bounds[1][1]===1);
    });

    it('point in poly', function(){
        var point = [1,1];
        var poly = [[0,0], [2,0], [2,2], [0,2], [0,0]];
        var result = pu.inside(point, poly);
        assert(result===true);
    });

    it('point outside poly', function(){
        var point = [1,2.5];
        var poly = [[0,0], [2,0], [2,2], [0,2], [0,0]];
        var result = pu.inside(point, poly);
        assert(result===false);
    });

    it('polys overlap inside', function() {
        var poly0 = [[0,0], [1,0], [1,1], [0,1], [0,0]];
        var poly1 = [[0.5,0.5], [1.5,0.5], [1.5,1.5], [0.5,1.5], [0.5,0.5]];
        var result = pu.overlap(poly0, poly1);
        assert(result===true);
    });

    it('polys overlap intersect', function() {

        var p0 = [[0,0], [2,0], [2,1], [0,1], [0,0]];
        var p1 = [[0.5,-0.5], [1.5,-0.5], [1.5,1.5], [0.5,1.5], [0.5,-0.5]];
        var result = pu.overlap(p0, p1);
        assert(result===true);
    });

    it('polys dont overlap', function() {
        var poly0 = [[0,0], [1,0], [1,1], [0,1], [0,0]];
        var poly1 = [[2,2], [3,2], [3,3], [2,3], [2,2]];
        var result = pu.overlap(poly0, poly1);
        assert(result===false);
    });

    it('polys dont overlap + timed', function() {

        // todo: add more points to test

        var poly0 = [[0,0], [1,0], [1,1], [0,1], [0,0]];
        var poly1 = [[2,2], [3,2], [3,3], [2,3], [2,2]];

        var t0 = new Date().getTime();
        pu.polyPointInside(poly0, poly1);
        var t1 = new Date().getTime();
        pu.polyEdgesOverlap(poly0, poly1);
        var t2 = new Date().getTime();

        //console.log("\npolyPointInside: %d ms", t1-t0);
        //console.log("polyEdgesOverlap: %d ms", t2-t1);

        assert(true);
    });

    it('polys should overlap (from real example that didnt..)', function(){

        var tile = [ [ -90, 66.51326044311186 ],
            [ 0, 66.51326044311186 ],
            [ 0, 85.0511287798066 ],
            [ -90, 85.0511287798066 ],
            [ -90, 66.51326044311186 ] ];

        var poly = [ [ -180, -90 ],
            [ 180, -90 ],
            [ 180, 90 ],
            [ -180, 90 ],
            [ -180, -90 ] ];

        var result1 = pu.overlap(tile, poly);
        assert(result1);

        var result2 = pu.overlap(poly, tile);
        assert(result2);
    });

    it('polys overlap simple', function() {
        const p0 = [[0,0], [1,0], [1,1]];
        const p1 = [[0.5,0.5], [1.5,0.5], [1.5,1.5]];
        assert(pu.overlap(p0, p1)===true);
    });

    it('lines intersect simple', function () {
        assert(pu.intersect(0,0, 1,1, 0,1, 1,0)===true);
    });

});
